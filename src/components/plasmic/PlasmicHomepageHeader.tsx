// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: KSqBdMGJVdcCT3NarXWvP
// Component: m9Uc6w-6ucLSb
import * as React from "react";

import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants,
} from "@plasmicapp/react-web";
import Logo from "..//Logo"; // plasmic-import: 88_wHRZTOo/component
import AuthorBio from "..//AuthorBio"; // plasmic-import: eYEub_LSfttWC/component

import "@plasmicapp/react-web/lib/plasmic.css";
import "./plasmic__default_style.css"; // plasmic-import: global/defaultcss
import "./plasmic_copy_of_starter_blog.css"; // plasmic-import: KSqBdMGJVdcCT3NarXWvP/projectcss
import "./PlasmicHomepageHeader.css"; // plasmic-import: m9Uc6w-6ucLSb/css

import PlasmicLogoIcon from "./PlasmicIcon__PlasmicLogo"; // plasmic-import: dv9FBlGUOPFrN/icon

export type PlasmicHomepageHeader__VariantMembers = {};
export type PlasmicHomepageHeader__VariantsArgs = {};
type VariantPropType = keyof PlasmicHomepageHeader__VariantsArgs;
export const PlasmicHomepageHeader__VariantProps = new Array<VariantPropType>();

export type PlasmicHomepageHeader__ArgsType = {
  title?: React.ReactNode;
  children?: React.ReactNode;
};
type ArgPropType = keyof PlasmicHomepageHeader__ArgsType;
export const PlasmicHomepageHeader__ArgProps = new Array<ArgPropType>(
  "title",
  "children"
);

export type PlasmicHomepageHeader__OverridesType = {
  root?: p.Flex<"div">;
  box?: p.Flex<"div">;
  logo?: p.Flex<typeof Logo>;
  link?: p.Flex<"a">;
  authorBio?: p.Flex<typeof AuthorBio>;
};

export interface DefaultHomepageHeaderProps {
  title?: React.ReactNode;
  children?: React.ReactNode;
  className?: string;
}

function PlasmicHomepageHeader__RenderFunc(props: {
  variants: PlasmicHomepageHeader__VariantsArgs;
  args: PlasmicHomepageHeader__ArgsType;
  overrides: PlasmicHomepageHeader__OverridesType;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode } = props;

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        "plasmic_default__all",
        "plasmic_default__div",
        "root_reset_KSqBdMGJVdcCT3NarXWvP",
        "HomepageHeader__root__uzeWo"
      )}
    >
      <div
        data-plasmic-name={"box"}
        data-plasmic-override={overrides.box}
        className={classNames(
          "plasmic_default__all",
          "plasmic_default__div",
          "HomepageHeader__box__y7X"
        )}
      >
        <p.PlasmicSlot
          defaultContents={
            <Logo
              data-plasmic-name={"logo"}
              data-plasmic-override={overrides.logo}
              className={classNames(
                "__wab_instance",
                "HomepageHeader__logo__rUk1T"
              )}
            />
          }
          value={args.children}
        />
      </div>

      <a
        data-plasmic-name={"link"}
        data-plasmic-override={overrides.link}
        className={classNames(
          "plasmic_default__all",
          "plasmic_default__a",
          "HomepageHeader__link__cOwQ5"
        )}
        href={"/" as const}
      >
        <p.PlasmicSlot
          defaultContents={"Yinflow React App"}
          value={args.title}
          className={classNames("HomepageHeader__slotTitle__mnymN")}
        />
      </a>

      <AuthorBio
        data-plasmic-name={"authorBio"}
        data-plasmic-override={overrides.authorBio}
        className={classNames(
          "__wab_instance",
          "HomepageHeader__authorBio__pEqdL"
        )}
      />
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "box", "logo", "link", "authorBio"],
  box: ["box", "logo"],
  logo: ["logo"],
  link: ["link"],
  authorBio: ["authorBio"],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<
  T extends NodeNameType
> = typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  box: "div";
  logo: typeof Logo;
  link: "a";
  authorBio: typeof AuthorBio;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHomepageHeader__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<
  T extends NodeNameType
> = // Explicitly specify variants, args, and overrides as objects
{
  variants?: PlasmicHomepageHeader__VariantsArgs;
  args?: PlasmicHomepageHeader__ArgsType;
  overrides?: NodeOverridesType<T>;
} & // Specify variants directly as props
Omit<PlasmicHomepageHeader__VariantsArgs, ReservedPropsType> &
  // Specify args directly as props
  Omit<PlasmicHomepageHeader__ArgsType, ReservedPropsType> &
  // Specify overrides for each element directly as props
  Omit<
    NodeOverridesType<T>,
    ReservedPropsType | VariantPropType | ArgPropType
  > &
  // Specify props for the root element
  Omit<
    Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
    ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
  >;
function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicHomepageHeader__ArgProps,
      internalVariantPropNames: PlasmicHomepageHeader__VariantProps,
    });

    return PlasmicHomepageHeader__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHomepageHeader";
  } else {
    func.displayName = `PlasmicHomepageHeader.${nodeName}`;
  }
  return func;
}

export const PlasmicHomepageHeader = Object.assign(
  // Top-level PlasmicHomepageHeader renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    box: makeNodeComponent("box"),
    logo: makeNodeComponent("logo"),
    link: makeNodeComponent("link"),
    authorBio: makeNodeComponent("authorBio"),

    // Metadata about props expected for PlasmicHomepageHeader
    internalVariantProps: PlasmicHomepageHeader__VariantProps,
    internalArgProps: PlasmicHomepageHeader__ArgProps,
  }
);

export default PlasmicHomepageHeader;
/* prettier-ignore-end */
