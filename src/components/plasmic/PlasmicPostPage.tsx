// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: KSqBdMGJVdcCT3NarXWvP
// Component: cnZ1rP7Ndm4o2
import * as React from "react";

import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants,
} from "@plasmicapp/react-web";
import PostHeader from "..//PostHeader"; // plasmic-import: er1DyUSXNhrfZ/component
import AuthorBio from "..//AuthorBio"; // plasmic-import: eYEub_LSfttWC/component
import Footer from "..//Footer"; // plasmic-import: qoXkvURRJnibL/component

import "@plasmicapp/react-web/lib/plasmic.css";
import "./plasmic__default_style.css"; // plasmic-import: global/defaultcss
import "./plasmic_copy_of_starter_blog.css"; // plasmic-import: KSqBdMGJVdcCT3NarXWvP/projectcss
import "./PlasmicPostPage.css"; // plasmic-import: cnZ1rP7Ndm4o2/css

import PlasmicLogoIcon from "./PlasmicIcon__PlasmicLogo"; // plasmic-import: dv9FBlGUOPFrN/icon

export type PlasmicPostPage__VariantMembers = {};
export type PlasmicPostPage__VariantsArgs = {};
type VariantPropType = keyof PlasmicPostPage__VariantsArgs;
export const PlasmicPostPage__VariantProps = new Array<VariantPropType>();

export type PlasmicPostPage__ArgsType = {
  contents?: React.ReactNode;
};
type ArgPropType = keyof PlasmicPostPage__ArgsType;
export const PlasmicPostPage__ArgProps = new Array<ArgPropType>("contents");

export type PlasmicPostPage__OverridesType = {
  root?: p.Flex<"div">;
  postHeader?: p.Flex<typeof PostHeader>;
  container?: p.Flex<"div">;
  authorBio?: p.Flex<typeof AuthorBio>;
  svg?: p.Flex<"svg">;
  previousPost?: p.Flex<"a">;
  nextPost?: p.Flex<"a">;
  footer?: p.Flex<typeof Footer>;
};

export interface DefaultPostPageProps {
  contents?: React.ReactNode;
  className?: string;
}

function PlasmicPostPage__RenderFunc(props: {
  variants: PlasmicPostPage__VariantsArgs;
  args: PlasmicPostPage__ArgsType;
  overrides: PlasmicPostPage__OverridesType;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode } = props;

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        "plasmic_default__all",
        "plasmic_default__div",
        "root_reset_KSqBdMGJVdcCT3NarXWvP",
        "PostPage__root__jy8XH"
      )}
    >
      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(
          "plasmic_default__all",
          "plasmic_default__div",
          "PostPage__box___2SzRm"
        )}
      >
        <PostHeader
          data-plasmic-name={"postHeader"}
          data-plasmic-override={overrides.postHeader}
          blogTitle={"Plasmic Starter Blog"}
          className={classNames(
            "__wab_instance",
            "PostPage__postHeader__t0EFs"
          )}
          date={"January 1, 2020"}
          postTitle={"Hello world"}
        />

        <div
          className={classNames(
            "plasmic_default__all",
            "plasmic_default__div",
            "PostPage__box__wboKx"
          )}
        >
          <div
            data-plasmic-name={"container"}
            data-plasmic-override={overrides.container}
            className={classNames(
              "plasmic_default__all",
              "plasmic_default__div",
              "PostPage__container__j1Zsg"
            )}
          >
            <p.PlasmicSlot
              defaultContents={
                "Blogging is so much fun! I could write on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on"
              }
              value={args.contents}
            />
          </div>
        </div>

        <div
          className={classNames(
            "plasmic_default__all",
            "plasmic_default__div",
            "PostPage__box__sefrj"
          )}
        />

        <AuthorBio
          data-plasmic-name={"authorBio"}
          data-plasmic-override={overrides.authorBio}
          className={classNames("__wab_instance", "PostPage__authorBio__r3Fk6")}
          description={"Built with love by the Plasmic team. "}
          profilepic={
            <PlasmicLogoIcon
              data-plasmic-name={"svg"}
              data-plasmic-override={overrides.svg}
              className={classNames(
                "plasmic_default__all",
                "plasmic_default__svg",
                "PostPage__svg__jObb1"
              )}
              role={"img"}
            />
          }
        />

        <div
          className={classNames(
            "plasmic_default__all",
            "plasmic_default__div",
            "PostPage__box___4A6Pe"
          )}
        >
          <a
            data-plasmic-name={"previousPost"}
            data-plasmic-override={overrides.previousPost}
            className={classNames(
              "plasmic_default__all",
              "plasmic_default__a",
              "__wab_text",
              "PostPage__previousPost__mpsGu"
            )}
          >
            {"Previous post"}
          </a>

          <a
            data-plasmic-name={"nextPost"}
            data-plasmic-override={overrides.nextPost}
            className={classNames(
              "plasmic_default__all",
              "plasmic_default__a",
              "__wab_text",
              "PostPage__nextPost__bZAbH"
            )}
          >
            {"Next post"}
          </a>
        </div>

        <Footer
          data-plasmic-name={"footer"}
          data-plasmic-override={overrides.footer}
          className={classNames("__wab_instance", "PostPage__footer__ksoQs")}
        />
      </p.Stack>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "postHeader",
    "container",
    "authorBio",
    "svg",
    "previousPost",
    "nextPost",
    "footer",
  ],
  postHeader: ["postHeader"],
  container: ["container"],
  authorBio: ["authorBio", "svg"],
  svg: ["svg"],
  previousPost: ["previousPost"],
  nextPost: ["nextPost"],
  footer: ["footer"],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<
  T extends NodeNameType
> = typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  postHeader: typeof PostHeader;
  container: "div";
  authorBio: typeof AuthorBio;
  svg: "svg";
  previousPost: "a";
  nextPost: "a";
  footer: typeof Footer;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicPostPage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<
  T extends NodeNameType
> = // Explicitly specify variants, args, and overrides as objects
{
  variants?: PlasmicPostPage__VariantsArgs;
  args?: PlasmicPostPage__ArgsType;
  overrides?: NodeOverridesType<T>;
} & // Specify variants directly as props
Omit<PlasmicPostPage__VariantsArgs, ReservedPropsType> &
  // Specify args directly as props
  Omit<PlasmicPostPage__ArgsType, ReservedPropsType> &
  // Specify overrides for each element directly as props
  Omit<
    NodeOverridesType<T>,
    ReservedPropsType | VariantPropType | ArgPropType
  > &
  // Specify props for the root element
  Omit<
    Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
    ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
  >;
function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicPostPage__ArgProps,
      internalVariantPropNames: PlasmicPostPage__VariantProps,
    });

    return PlasmicPostPage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicPostPage";
  } else {
    func.displayName = `PlasmicPostPage.${nodeName}`;
  }
  return func;
}

export const PlasmicPostPage = Object.assign(
  // Top-level PlasmicPostPage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    postHeader: makeNodeComponent("postHeader"),
    container: makeNodeComponent("container"),
    authorBio: makeNodeComponent("authorBio"),
    svg: makeNodeComponent("svg"),
    previousPost: makeNodeComponent("previousPost"),
    nextPost: makeNodeComponent("nextPost"),
    footer: makeNodeComponent("footer"),

    // Metadata about props expected for PlasmicPostPage
    internalVariantProps: PlasmicPostPage__VariantProps,
    internalArgProps: PlasmicPostPage__ArgProps,
  }
);

export default PlasmicPostPage;
/* prettier-ignore-end */
