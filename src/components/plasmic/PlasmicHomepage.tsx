// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: KSqBdMGJVdcCT3NarXWvP
// Component: S8CHoXOOoe3nD
import * as React from "react";

import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants,
} from "@plasmicapp/react-web";
import HomepageHeader from "..//HomepageHeader"; // plasmic-import: m9Uc6w-6ucLSb/component
import Logo from "..//Logo"; // plasmic-import: 88_wHRZTOo/component
import ListItem from "..//ListItem"; // plasmic-import: 9Zio7Q8zBtQbT/component
import Footer from "..//Footer"; // plasmic-import: qoXkvURRJnibL/component

import "@plasmicapp/react-web/lib/plasmic.css";
import "./plasmic__default_style.css"; // plasmic-import: global/defaultcss
import "./plasmic_copy_of_starter_blog.css"; // plasmic-import: KSqBdMGJVdcCT3NarXWvP/projectcss
import "./PlasmicHomepage.css"; // plasmic-import: S8CHoXOOoe3nD/css

export type PlasmicHomepage__VariantMembers = {};
export type PlasmicHomepage__VariantsArgs = {};
type VariantPropType = keyof PlasmicHomepage__VariantsArgs;
export const PlasmicHomepage__VariantProps = new Array<VariantPropType>();

export type PlasmicHomepage__ArgsType = {};
type ArgPropType = keyof PlasmicHomepage__ArgsType;
export const PlasmicHomepage__ArgProps = new Array<ArgPropType>();

export type PlasmicHomepage__OverridesType = {
  root?: p.Flex<"div">;
  box?: p.Flex<"div">;
  homepageHeader?: p.Flex<typeof HomepageHeader>;
  container?: p.Flex<"div">;
  footer?: p.Flex<typeof Footer>;
};

export interface DefaultHomepageProps {
  className?: string;
}

function PlasmicHomepage__RenderFunc(props: {
  variants: PlasmicHomepage__VariantsArgs;
  args: PlasmicHomepage__ArgsType;
  overrides: PlasmicHomepage__OverridesType;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode } = props;

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        "plasmic_default__all",
        "plasmic_default__div",
        "root_reset_KSqBdMGJVdcCT3NarXWvP",
        "Homepage__root__txfJ7"
      )}
    >
      <p.Stack
        as={"div"}
        data-plasmic-name={"box"}
        data-plasmic-override={overrides.box}
        hasGap={true}
        className={classNames(
          "plasmic_default__all",
          "plasmic_default__div",
          "Homepage__box__hHZp"
        )}
      >
        <HomepageHeader
          data-plasmic-name={"homepageHeader"}
          data-plasmic-override={overrides.homepageHeader}
          className={classNames(
            "__wab_instance",
            "Homepage__homepageHeader__znJIb"
          )}
          title={"Plasmic Starter Blog"}
        />

        <p.Stack
          as={"div"}
          data-plasmic-name={"container"}
          data-plasmic-override={overrides.container}
          hasGap={true}
          className={classNames(
            "plasmic_default__all",
            "plasmic_default__div",
            "Homepage__container__tSuqg"
          )}
        >
          <ListItem
            date={"April 1, 2020"}
            description={"3 months later, I'm still blogging"}
            title={"Fourth post"}
          />

          <ListItem
            className={classNames("__wab_instance", "Homepage__listItem__iYwR")}
            date={"March 1, 2020"}
            description={"2 months later, I'm still blogging."}
            title={"Third post"}
          />

          <ListItem
            className={classNames(
              "__wab_instance",
              "Homepage__listItem__irXs6"
            )}
            date={"February 1, 2020"}
            description={"1 month later, I'm still blogging."}
            title={"Second post"}
          />

          <ListItem
            className={classNames("__wab_instance", "Homepage__listItem__znJP")}
            date={"January 1, 2020"}
            description={"Hello world"}
            title={"Hello world"}
          />
        </p.Stack>

        <Footer
          data-plasmic-name={"footer"}
          data-plasmic-override={overrides.footer}
          className={classNames("__wab_instance", "Homepage__footer___9Mjvj")}
        />
      </p.Stack>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "box", "homepageHeader", "container", "footer"],
  box: ["box", "homepageHeader", "container", "footer"],
  homepageHeader: ["homepageHeader"],
  container: ["container"],
  footer: ["footer"],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<
  T extends NodeNameType
> = typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  box: "div";
  homepageHeader: typeof HomepageHeader;
  container: "div";
  footer: typeof Footer;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHomepage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<
  T extends NodeNameType
> = // Explicitly specify variants, args, and overrides as objects
{
  variants?: PlasmicHomepage__VariantsArgs;
  args?: PlasmicHomepage__ArgsType;
  overrides?: NodeOverridesType<T>;
} & // Specify variants directly as props
Omit<PlasmicHomepage__VariantsArgs, ReservedPropsType> &
  // Specify args directly as props
  Omit<PlasmicHomepage__ArgsType, ReservedPropsType> &
  // Specify overrides for each element directly as props
  Omit<
    NodeOverridesType<T>,
    ReservedPropsType | VariantPropType | ArgPropType
  > &
  // Specify props for the root element
  Omit<
    Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
    ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
  >;
function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicHomepage__ArgProps,
      internalVariantPropNames: PlasmicHomepage__VariantProps,
    });

    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHomepage";
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`;
  }
  return func;
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    box: makeNodeComponent("box"),
    homepageHeader: makeNodeComponent("homepageHeader"),
    container: makeNodeComponent("container"),
    footer: makeNodeComponent("footer"),

    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps,
  }
);

export default PlasmicHomepage;
/* prettier-ignore-end */
